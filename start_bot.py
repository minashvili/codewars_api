
import os
from dotenv import load_dotenv
import sqlite3
import random
import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import threading


get_problem = ''
cout_done = 0

bot_api_key = os.getenv('SECRET_KEY')
bot = telebot.TeleBot(bot_api_key)


def get_id_with_out_solution(path_to_db: str) -> list[tuple]|None:

    try:
        sqlite_connection = sqlite3.connect(path_to_db)
        cursor = sqlite_connection.cursor()
        #print("connection to SQLite")
        sqlite_select_query = """SELECT id, ext_id FROM kata WHERE kata.solution IS ' ';"""
        cursor.execute(sqlite_select_query)
        rows_from_kata = cursor.fetchall()
        #for row_from_kata in rows_from_kata:
        #print(type(rows_from_kata))
        cursor.close()

    except sqlite3.Error as error:
        print("Error when working with SQLite", error)
    finally:
        if sqlite_connection:
            sqlite_connection.close()
            #print("Connection to SQLite closed")
    
    return rows_from_kata
    #print(rows_from_kata)


def randomly_select_id(list_id_from_kata: list[tuple]) -> str:
    random_id = random.choice(list_id_from_kata)
    return f'https://www.codewars.com/kata/{random_id[1]}'


def insert_solution_to_db(path_to_db_update: str, username: str,  ext_id: str) -> None:
    
    parms = (username, ext_id)
    try:
        sqlite_connection = sqlite3.connect(path_to_db_update)
        cursor = sqlite_connection.cursor()
        sqlite_update_query = """UPDATE kata SET solution = solution || ' ' || ? WHERE ext_id = ?;"""
        cursor.execute(sqlite_update_query, parms)
        sqlite_connection.commit()
        cursor.close()

    except sqlite3.Error as error:
        print("Error when working with SQLite", error)
    finally:
        if sqlite_connection:
            sqlite_connection.close()
    
    return None

def super_reset() -> None:
    global cout_done
    cout_done = 0
    triz('')

@bot.message_handler(commands=['triz'])
def triz(message):

    global get_problem
    get_problem = randomly_select_id(get_id_with_out_solution('kata_from_codewars.db'))
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("Done")
    #btn2 = types.KeyboardButton("Statistics")
    markup.add(btn1)
    bot.send_message('-1002115846059', f"–†–∞–¥–∞—Ä –ê–∫–∞–¥–µ–º–∏–∏ –¢–†–ò–ó üì° –∑–∞—Ñ–µ–∫—Å–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ! \
                     {get_problem} ", reply_markup=markup) 
    

@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.text == 'Done':
        
        if message.from_user.last_name:
            get_name_user = f'{message.from_user.first_name} {message.from_user.last_name}'
        else:
            get_name_user = f'{message.from_user.first_name}'

        id_problem_codewars = get_problem.split('/')[-1]

        global cout_done

        if cout_done < 1:
            bot.send_message('-1002115846059', (
                f'–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—é üëæ{id_problem_codewars} –Ω–∞–Ω–µ—Å–µ–Ω –ø–µ—Ä–≤—ã–π —É–¥–∞—Ä!'
                f' –ê–∫–∞–¥–µ–º–∏—è –¢–†–ò–ó –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π {get_name_user}')) #–û—Ç–≤–µ—Ç –±–æ—Ç–∞
            #–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É —Å —Ä–µ—à–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Æ–ó–ï–†–ê –í –ü–û–õ–ï –†–ï–®–ï–ù–ò–ï 
            insert_solution_to_db('kata_from_codewars.db', get_name_user, id_problem_codewars)
            cout_done += 1
            print(cout_done)

        elif cout_done <= 1:
            bot.send_message('-1002115846059', (
                f'–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—é üëæ{id_problem_codewars} –Ω–∞–Ω–µ—Å–µ–Ω —Ä–µ—à–∞—é—à–∏–π —É–¥–∞—Ä!'
                f' –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å {get_name_user}!'))
            insert_solution_to_db('kata_from_codewars.db', get_name_user, id_problem_codewars)
            cout_done += 1            
            print(cout_done)
            # –¢—É—Ç –∑–∞–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –¥–µ—Ä–Ω—É—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ –¢—Ä–∏–∑–∞ triz('') –∏ cout_done = 0
            timer = threading.Timer(random.randint(43200,172800), super_reset)
            timer.start()

        else:
            bot.send_message('-1002115846059', 'üì° –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π.')
            #triz('')
            #cout_done = 0
            print(cout_done)

    elif message.text == 'New_problem': #(–¢–µ—Å—Ç–æ–≤–∞—è —Ö–µ—Ä–æ–≤–∏–Ω–∞)
        triz('')
        cout_done = 0




load_dotenv()
triz('') 
bot.polling(none_stop=True, interval=0) 



#–§—É–Ω–∫—Ü–∏—è threading –¥–æ–ª–∂–Ω–∞ 
#2 - –∑–∞–¥–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤–µ—Ä–º—è –µ—Å–ª–∏ –µ–µ –≤—ã–∑–≤–∞–ª–∏ –∏ —É–π—Ç–∏ –≤ –∞–Ω—Å–∏–Ω—Ö—Ä–æ–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ 



