
import sqlite3
import random
import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton


def get_id_with_out_solution(path_to_db: str) -> list[tuple]|None:

    try:
        sqlite_connection = sqlite3.connect(path_to_db)
        cursor = sqlite_connection.cursor()
        #print("connection to SQLite")
        sqlite_select_query = """SELECT id, ext_id FROM kata WHERE kata.solution IS NULL;"""
        cursor.execute(sqlite_select_query)
        rows_from_kata = cursor.fetchall()
        #for row_from_kata in rows_from_kata:
        #print(type(rows_from_kata))
        cursor.close()

    except sqlite3.Error as error:
        print("Error when working with SQLite", error)
    finally:
        if sqlite_connection:
            sqlite_connection.close()
            #print("Connection to SQLite closed")
    
    return rows_from_kata
    #print(rows_from_kata)


def randomly_select_id(list_id_from_kata: list[tuple]) -> str:
    random_id = random.choice(list_id_from_kata)
    return f'https://www.codewars.com/kata/{random_id[1]}'


bot = telebot.TeleBot('5157162549:AAEQe3F2rIuLgXwGw1yh3U_vfGyqt_uT5eM')
get_problem = randomly_select_id(get_id_with_out_solution('kata_from_codewars.db'))

@bot.message_handler(commands=['triz'])
def triz(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("Done")
    markup.add(btn1)
    bot.send_message('-1002115846059', f"–†–∞–¥–∞—Ä –ê–∫–∞–¥–µ–º–∏–∏ –¢–†–ò–ó üì° –∑–∞—Ñ–µ–∫—Å–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ! \
                     {get_problem} ", reply_markup=markup) 
    

cout_done = 0

@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    
    if message.text == 'Done':
        
        if message.from_user.last_name:
            get_name_user = f'{message.from_user.first_name} {message.from_user.last_name}'
        else:
            get_name_user = f'{message.from_user.first_name}'

        bot.send_message('-1002115846059', (
            f'–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ üëæ{get_problem.split('/')[-1]} —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ!'
            f'–ê–∫–∞–¥–µ–º–∏—è –¢–†–ò–ó –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π {get_name_user}')) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        #–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É —Å —Ä–µ—à–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Æ–ó–ï–†–ê –í –ü–û–õ–ï –†–ï–®–ï–ù–ò–ï –∏–ª–∏ —á—Ç–æ-—Ç–æ —Ç–∞–∫–æ–µ 
        global cout_done
        cout_done += 1

        if cout_done > 2:
            bot.send_message('-1002115846059', '–°—á–µ—Ç—á–∏–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –±–æ–ª—å—à–µ –¥–≤—É—Ö, —Å–∏–≥–Ω–∞–ª –ê–∫–∞–¥–µ–º–∏–∏ –¢–†–ò–ó —É—Å–ø–µ—à–Ω–æ —Ç–µ—Ä–º–∏–Ω–∏—Ä—É–µ—Ç—Å—è')
            


triz('')
bot.polling(none_stop=True, interval=0) 




#–°–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ –¥–≤—É—Ö Done –¥–æ–ª–∂–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ—Å—Ç–∞–≤–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è 
#–ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—Å–µ–≥–¥–∞ –≤ —Å–µ—Ç–∏ —Ç–æ –Ω–∞–¥–æ –¥–µ—Ä–≥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—è triz('') –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ 
#





